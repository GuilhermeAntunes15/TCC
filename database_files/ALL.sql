DROP database IF exists tcc;
create database tcc;
use tcc;

CREATE TABLE T_USUARIO(
    CD_USUARIO INT(11) Primary key auto_increment,
    US_LOGIN VARCHAR(20),
    US_EMAIL VARCHAR(60),
    US_SENHA VARCHAR(260),
    US_DT_NASCIMENTO date,
    US_FL_USUARIO_ATIVO_SN CHAR(1), 
    US_DT_AUDITORIA_ALTERACAO DATETIME,
    US_AUDITORIA_LOGIN TEXT
);

CREATE TABLE T_LINGUAGEM_PROGRAMACAO(
    CD_LINGUAGEM_PROGRAMACAO INT(11) Primary key auto_increment,
    LP_NOME VARCHAR(20),
    LP_FL_LINGUAGEM_PROGRAMACAO_ATIVO_SN CHAR(1), 
    LP_DT_AUDITORIA_ALTERACAO DATETIME,
    LP_DS_AUDITORIA_LOGIN TEXT
);

CREATE TABLE T_PROFESSOR(
    CD_PROFESSOR INT(11) Primary key auto_increment,
    PRO_LOGIN VARCHAR(20),
    PRO_EMAIL VARCHAR(60),
    PRO_SENHA VARCHAR(260),
    PRO_CPF VARCHAR(20),
    PRO_DT_NASCIMENTO date,
    PRO_FL_PROFESSOR_ATIVO_SN CHAR(1), 
    PRO_DT_AUDITORIA_ALTERACAO DATETIME,
    PRO_DS_AUDITORIA_LOGIN TEXT
);

CREATE TABLE T_CURSO(
    CD_CURSO INT(11) Primary key auto_increment,
    CUR_TITULO VARCHAR(30),
    CUR_DESCRICAO TEXT,
    CUR_QT_AULA INT,
    CUR_REQUERIMENTO_01 VARCHAR(20),
    CUR_REQUERIMENTO_02 VARCHAR(20),
    CUR_REQUERIMENTO_03 VARCHAR(20),
    CUR_REQUERIMENTO_04 VARCHAR(20),
    CUR_REQUERIMENTO_05 VARCHAR(20),
    CUR_FL_CURSO_ATIVO_SN CHAR(1), 
    CUR_DT_AUDITORIA_ALTERACAO DATETIME,
    CUR_DS_AUDITORIA_LOGIN TEXT,

    CD_LINGUAGEM_PROGRAMACAO INT,
    CD_PROFESSOR INT,

    FOREIGN KEY (CD_LINGUAGEM_PROGRAMACAO) REFERENCES T_LINGUAGEM_PROGRAMACAO(CD_LINGUAGEM_PROGRAMACAO),
    FOREIGN KEY (CD_PROFESSOR) REFERENCES T_PROFESSOR(CD_PROFESSOR)
);

CREATE TABLE T_MATRICULA(
    CD_MATRICULA INT(11) Primary key auto_increment,
    MA_STATUS VARCHAR(3),
    MA_DT_INICIO date,
    MA_DT_TERMINO date,
    MA_FL_MATRICULA_ATIVO_SN CHAR(1), 
    MA_DT_AUDITORIA_ALTERACAO DATETIME,
    MA_DS_AUDITORIA_LOGIN TEXT,
    CD_USUARIO INT,
    CD_CURSO INT,

    FOREIGN KEY (CD_USUARIO) REFERENCES T_USUARIO(CD_USUARIO),
    FOREIGN KEY (CD_CURSO) REFERENCES T_CURSO(CD_CURSO)

);

####################################################################################-------

DROP PROCEDURE IF EXISTS PR_T_CURSO_DELETE;

DELIMITER $$
CREATE PROCEDURE PR_T_CURSO_DELETE
(
IN _CD_CURSO int(11)
)
BEGIN
DECLARE errno INT;

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
	GET CURRENT DIAGNOSTICS CONDITION 1 errno = MYSQL_ERRNO;
	SELECT errno AS MYSQL_ERROR;
	ROLLBACK;
END;

START TRANSACTION;

UPDATE T_CURSO
SET
    FL_CURSO_ATIVO_SN = 'N'
WHERE
    CD_CURSO = _CD_CURSO;
    
COMMIT WORK;

END$$
DELIMITER ;

########################################################---------

DROP PROCEDURE IF EXISTS PR_T_CURSO_INSERT;

DELIMITER $$
CREATE PROCEDURE PR_T_CURSO_INSERT
(
OUT _CD_CURSO int(11),
IN _CUR_TITULO VARCHAR(30),
IN _CUR_DESCRICAO TEXT,
IN _CUR_QT_AULA INT,
IN _CUR_REQUERIMENTO_01 VARCHAR(20),
IN _CUR_REQUERIMENTO_02 VARCHAR(20),
IN _CUR_REQUERIMENTO_03 VARCHAR(20),
IN _CUR_REQUERIMENTO_04 VARCHAR(20),
IN _CUR_REQUERIMENTO_05 VARCHAR(20),
IN _CUR_FL_CURSO_ATIVO_SN CHAR(1), 
IN _CUR_DT_AUDITORIA_ALTERACAO DATETIME,
IN _CUR_DS_AUDITORIA_LOGIN TEXT,
IN _CD_LINGUAGEM_PROGRAMACAO INT,
IN _CD_PROFESSOR INT
)
BEGIN
DECLARE errno INT;

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
	GET CURRENT DIAGNOSTICS CONDITION 1 errno = MYSQL_ERRNO;
	SELECT errno AS MYSQL_ERROR;
	ROLLBACK;
END;

START TRANSACTION;

INSERT INTO T_CURSO
(
    CUR_TITULO,
    CUR_DESCRICAO,
    CUR_QT_AULA,
    CUR_REQUERIMENTO_01,
    CUR_REQUERIMENTO_02,
    CUR_REQUERIMENTO_03,
    CUR_REQUERIMENTO_04,
    CUR_REQUERIMENTO_05,
    CUR_FL_CURSO_ATIVO_SN, 
    CUR_DT_AUDITORIA_ALTERACAO,
    CUR_DS_AUDITORIA_LOGIN,
    CD_LINGUAGEM_PROGRAMACAO,
    CD_PROFESSOR 
)
VALUES
(
    _CUR_TITULO,
    _CUR_DESCRICAO,
    _CUR_QT_AULA,
    _CUR_REQUERIMENTO_01,
    _CUR_REQUERIMENTO_02,
    _CUR_REQUERIMENTO_03,
    _CUR_REQUERIMENTO_04,
    _CUR_REQUERIMENTO_05,
    _CUR_FL_CURSO_ATIVO_SN, 
    _CUR_DT_AUDITORIA_ALTERACAO,
    _CUR_DS_AUDITORIA_LOGIN,
    _CD_LINGUAGEM_PROGRAMACAO,
    _CD_PROFESSOR
);

COMMIT WORK;
SET
	_CD_CURSO = LAST_INSERT_ID();

END$$
DELIMITER ;

########################################################

DROP PROCEDURE IF EXISTS PR_T_CURSO_UPDATE;

DELIMITER $$
CREATE PROCEDURE PR_T_CURSO_UPDATE
(
IN _CD_CURSO int(11),
IN _CUR_TITULO VARCHAR(30),
IN _CUR_DESCRICAO TEXT,
IN _CUR_QT_AULA INT,
IN _CUR_REQUERIMENTO_01 VARCHAR(20),
IN _CUR_REQUERIMENTO_02 VARCHAR(20),
IN _CUR_REQUERIMENTO_03 VARCHAR(20),
IN _CUR_REQUERIMENTO_04 VARCHAR(20),
IN _CUR_REQUERIMENTO_05 VARCHAR(20),
IN _CUR_FL_CURSO_ATIVO_SN CHAR(1), 
IN _CUR_DT_AUDITORIA_ALTERACAO DATETIME,
IN _CUR_AUDITORIA_LOGIN TEXT,
IN _CD_LINGUAGEM_PROGRAMACAO INT,
IN _CD_PROFESSOR INT
)
BEGIN
DECLARE errno INT;

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
	GET CURRENT DIAGNOSTICS CONDITION 1 errno = MYSQL_ERRNO;
	SELECT errno AS MYSQL_ERROR;
	ROLLBACK;
END;

START TRANSACTION;

UPDATE T_CURSO
SET
	CUR_TITULO = _CUR_TITULO,
    CUR_DESCRICAO = _CUR_DESCRICAO,
    CUR_QT_AULA = _CUR_QT_AULA,
    CUR_REQUERIMENTO_01 = _CUR_REQUERIMENTO_01,
    CUR_REQUERIMENTO_02 = _CUR_REQUERIMENTO_02,
    CUR_REQUERIMENTO_03 = _CUR_REQUERIMENTO_03,
    CUR_REQUERIMENTO_04 = _CUR_REQUERIMENTO_04,
    CUR_REQUERIMENTO_05 = _CUR_REQUERIMENTO_05,
    CUR_FL_CURSO_ATIVO_SN = _CUR_FL_CURSO_ATIVO_SN,
    CUR_DT_AUDITORIA_ALTERACAO = _CUR_DT_AUDITORIA_ALTERACAO,
    CUR_DS_AUDITORIA_LOGIN = _CUR_DS_AUDITORIA_LOGIN,
	CD_LINGUAGEM_PROGRAMACAO = _CD_LINGUAGEM_PROGRAMACAO,
    CD_PROFESSOR = _CD_PROFESSOR
WHERE
    CD_CURSO = _CD_CURSO;
    
COMMIT WORK;

END$$
DELIMITER ;


########################################################---

DROP PROCEDURE IF EXISTS PR_T_LINGUAGEM_PROGRAMACAO_DELETE;

DELIMITER $$
CREATE PROCEDURE PR_T_LINGUAGEM_PROGRAMACAO_DELETE
(
IN _CD_USUARIO int(11)
)
BEGIN
DECLARE errno INT;

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
	GET CURRENT DIAGNOSTICS CONDITION 1 errno = MYSQL_ERRNO;
	SELECT errno AS MYSQL_ERROR;
	ROLLBACK;
END;

START TRANSACTION;

UPDATE T_LINGUAGEM_PROGRAMACAO
SET
    FL_USUARIO_ATIVO_SN = 'N'
WHERE
    CD_LINGUAGEM_PROGRAMACAO = _CD_LINGUAGEM_PROGRAMACAO;
    
COMMIT WORK;

END$$
DELIMITER ;


##########################################------

DROP PROCEDURE IF EXISTS PR_T_LINGUAGEM_PROGRAMACAO_INSERT;

DELIMITER $$
CREATE PROCEDURE PR_T_LINGUAGEM_PROGRAMACAO_INSERT
(
OUT _CD_LINGUAGEM_PROGRAMACAO int(11),
IN _LP_FL_LINGUAGEM_PROGRAMACAO_ATIVO_SN CHAR(1), 
IN _LP_DT_AUDITORIA_ALTERACAO DATETIME,
IN _LP_DS_AUDITORIA_LOGIN TEXT
)
BEGIN
DECLARE errno INT;

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
	GET CURRENT DIAGNOSTICS CONDITION 1 errno = MYSQL_ERRNO;
	SELECT errno AS MYSQL_ERROR;
	ROLLBACK;
END;

START TRANSACTION;

INSERT INTO T_LINGUAGEM_PROGRAMACAO
(
    LP_NOME,
    LP_FL_LINGUAGEM_PROGRAMACAO_ATIVO_SN,
    LP_DT_AUDITORIA_ALTERACAO,
    LP_DS_AUDITORIA_LOGIN
)
VALUES
(
    _LP_NOME,
    _LP_FL_LINGUAGEM_PROGRAMACAO_ATIVO_SN,
    _LP_DT_AUDITORIA_ALTERACAO,
    _LP_DS_AUDITORIA_LOGIN
);

COMMIT WORK;
SET
	_CD_LINGUAGEM_PROGRAMACAO = LAST_INSERT_ID();

END$$
DELIMITER ;


##########################################-----------

DROP PROCEDURE IF EXISTS PR_T_LINGUAGEM_PROGRAMACAO_UPDATE;

DELIMITER $$
CREATE PROCEDURE PR_T_LINGUAGEM_PROGRAMACAO_UPDATE
(
IN _CD_LINGUAGEM_PROGRAMACAO int(11),
IN _LP_NOME VARCHAR(20),
IN _LP_FL_LINGUAGEM_PROGRAMACAO_ATIVO_SN CHAR(1),
IN _LP_DT_AUDITORIA_ALTERACAO DATETIME,
IN _LP_DS_AUDITORIA_LOGIN TEXT
)
BEGIN
DECLARE errno INT;

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
	GET CURRENT DIAGNOSTICS CONDITION 1 errno = MYSQL_ERRNO;
	SELECT errno AS MYSQL_ERROR;
	ROLLBACK;
END;

START TRANSACTION;

UPDATE T_LINGUAGEM_PROGRAMACAO
SET
LP_NOME = _LP_NOME,
LP_FL_LINGUAGEM_PROGRAMACAO_ATIVO_SN = _LP_FL_LINGUAGEM_PROGRAMACAO_ATIVO_SN,
LP_DT_AUDITORIA_ALTERACAO = _LP_DT_AUDITORIA_ALTERACAO,
LP_DS_AUDITORIA_LOGIN = _LP_DS_AUDITORIA_LOGIN
WHERE
    CD_LINGUAGEM_PROGRAMACAO = _CD_LINGUAGEM_PROGRAMACAO;
    
COMMIT WORK;

END$$
DELIMITER ;


##########################################----------

DROP PROCEDURE IF EXISTS PR_T_MATRICULA_DELETE;

DELIMITER $$
CREATE PROCEDURE PR_T_MATRICULA_DELETE
(
IN _CD_MATRICULA int(11)
)
BEGIN
DECLARE errno INT;

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
	GET CURRENT DIAGNOSTICS CONDITION 1 errno = MYSQL_ERRNO;
	SELECT errno AS MYSQL_ERROR;
	ROLLBACK;
END;

START TRANSACTION;

UPDATE T_MATRICULA
SET
    FL_MATRICULA_ATIVO_SN = 'N'
WHERE
    CD_MATRICULA = _CD_MATRICULA;
    
COMMIT WORK;

END$$
DELIMITER ;


##########################################--------

DROP PROCEDURE IF EXISTS PR_T_MATRICULA_INSERT;

DELIMITER $$
CREATE PROCEDURE PR_T_MATRICULA_INSERT
(
OUT _CD_MATRICULA int(11),
IN _MA_STATUS VARCHAR(3),
IN _MA_DT_INICIO date,
IN _MA_DT_TERMINO date,
IN _MA_FL_MATRICULA_ATIVO_SN CHAR(1), 
IN _MA_DT_AUDITORIA_ALTERACAO DATETIME,
IN _MA_DS_AUDITORIA_LOGIN TEXT,
IN _CD_USUARIO INT,
IN _CD_CURSO INT
)
BEGIN
DECLARE errno INT;

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
	GET CURRENT DIAGNOSTICS CONDITION 1 errno = MYSQL_ERRNO;
	SELECT errno AS MYSQL_ERROR;
	ROLLBACK;
END;

START TRANSACTION;

INSERT INTO T_MATRICULA
(
    MA_STATUS,
    MA_DT_INICIO,
    MA_DT_TERMINO,
    MA_FL_MATRICULA_ATIVO_SN, 
    MA_DT_AUDITORIA_ALTERACAO,
    MA_DS_AUDITORIA_LOGIN,
    CD_USUARIO,
    CD_CURSO
)
VALUES
(
    _MA_STATUS,
    _MA_DT_INICIO,
    _MA_DT_TERMINO,
    _MA_FL_MATRICULA_ATIVO_SN, 
    _MA_DT_AUDITORIA_ALTERACAO,
    _MA_DS_AUDITORIA_LOGIN,
    _CD_USUARIO,
    _CD_CURSO
);

COMMIT WORK;
SET
	_CD_MATRICULA = LAST_INSERT_ID();

END$$
DELIMITER ;


############################--------

DROP PROCEDURE IF EXISTS PR_T_MATRICULA_UPDATE;

DELIMITER $$
CREATE PROCEDURE PR_T_MATRICULA_UPDATE
(
IN _CD_MATRICULA int(11),
IN _MA_STATUS VARCHAR(3),
IN _MA_DT_INICIO date,
IN _MA_DT_TERMINO date,
IN _MA_FL_MATRICULA_ATIVO_SN CHAR(1), 
IN _MA_DT_AUDITORIA_ALTERACAO DATETIME,
IN _MA_DS_AUDITORIA_LOGIN TEXT,
IN _CD_USUARIO INT,
IN _CD_CURSO INT
)
BEGIN
DECLARE errno INT;

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
	GET CURRENT DIAGNOSTICS CONDITION 1 errno = MYSQL_ERRNO;
	SELECT errno AS MYSQL_ERROR;
	ROLLBACK;
END;

START TRANSACTION;

UPDATE T_MATRICULA
SET
    MA_STATUS = _MA_STATUS,
    MA_STATUS = _MA_STATUS,
    MA_DT_INICIO = _MA_DT_INICIO,
    MA_DT_TERMINO = _MA_DT_TERMINO,
    MA_FL_MATRICULA_ATIVO_SN = _MA_FL_MATRICULA_ATIVO_SN,
    MA_DT_AUDITORIA_ALTERACAO = _MA_DT_AUDITORIA_ALTERACAO,
    MA_DS_AUDITORIA_LOGIN = _MA_DS_AUDITORIA_LOGIN,
    CD_USUARIO = _CD_USUARIO,
    CD_CURSO = _CD_CURSO
WHERE
    CD_MATRICULA = _CD_MATRICULA;
    
COMMIT WORK;

END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS PR_T_PROFESSOR_DELETE;

DELIMITER $$
CREATE PROCEDURE PR_T_PROFESSOR_DELETE
(
IN _CD_PROFESSOR int(11)
)
BEGIN
DECLARE errno INT;

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
	GET CURRENT DIAGNOSTICS CONDITION 1 errno = MYSQL_ERRNO;
	SELECT errno AS MYSQL_ERROR;
	ROLLBACK;
END;

START TRANSACTION;

UPDATE T_PROFESSOR
SET
    FL_PROFESSOR_ATIVO_SN = 'N'
WHERE
    CD_PROFESSOR = _CD_PROFESSOR;
    
COMMIT WORK;

END$$
DELIMITER ;

##########################################----

DROP PROCEDURE IF EXISTS PR_T_PROFESSOR_INSERT;

DELIMITER $$
CREATE PROCEDURE PR_T_PROFESSOR_INSERT
(
OUT _CD_PROFESSOR int(11),
IN _PRO_LOGIN VARCHAR(20),
IN _PRO_EMAIL VARCHAR(60),
IN _PRO_SENHA VARCHAR(260),
IN _PRO_CPF VARCHAR(20),
IN _PRO_DT_NASCIMENTO date,
IN _PRO_FL_PROFESSOR_ATIVO_SN CHAR(1), 
IN _PRO_DT_AUDITORIA_ALTERACAO DATETIME,
IN _PRO_DS_AUDITORIA_LOGIN TEXT
)
BEGIN
DECLARE errno INT;

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
	GET CURRENT DIAGNOSTICS CONDITION 1 errno = MYSQL_ERRNO;
	SELECT errno AS MYSQL_ERROR;
	ROLLBACK;
END;

START TRANSACTION;

INSERT INTO T_PROFESSOR
(
    PRO_LOGIN,
    PRO_EMAIL,
    PRO_SENHA,
    PRO_CPF,
    PRO_DT_NASCIMENTO,
    PRO_FL_PROFESSOR_ATIVO_SN, 
    PRO_DT_AUDITORIA_ALTERACAO,
    PRO_DS_AUDITORIA_LOGIN
)
VALUES
(
    _PRO_LOGIN,
    _PRO_EMAIL,
    _PRO_SENHA,
    _PRO_CPF,
    _PRO_DT_NASCIMENTO,
    _PRO_FL_PROFESSOR_ATIVO_SN, 
    _PRO_DT_AUDITORIA_ALTERACAO,
    _PRO_DS_AUDITORIA_LOGIN
);

COMMIT WORK;
SET
	_CD_PROFESSOR = LAST_INSERT_ID();

END$$
DELIMITER ;

##########################################

DROP PROCEDURE IF EXISTS PR_T_PROFESSOR_UPDATE;

DELIMITER $$
CREATE PROCEDURE PR_T_PROFESSOR_UPDATE
(
IN _CD_PROFESSOR int(11),
IN _PRO_LOGIN VARCHAR(20),
IN _PRO_EMAIL VARCHAR(60),
IN _PRO_SENHA VARCHAR(260),
IN _PRO_CPF VARCHAR(20),
IN _PRO_DR_NASCIMENTO date, 
IN _PRO_FL_PROFESSOR_ATIVO_SN CHAR(1), 
IN _PRO_DT_AUDITORIA_ALTERACAO DATETIME,
IN _PRO_DS_AUDITORIA_LOGIN TEXT
)
BEGIN
DECLARE errno INT;

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
	GET CURRENT DIAGNOSTICS CONDITION 1 errno = MYSQL_ERRNO;
	SELECT errno AS MYSQL_ERROR;
	ROLLBACK;
END;

START TRANSACTION;

UPDATE T_PROFESSOR
SET
PRO_LOGIN = _PRO_LOGIN,
PRO_EMAIL = _PRO_EMAIL,
PRO_SENHA = _PRO_SENHA,
PRO_CPF = _PRO_CPF,
PRO_DT_NASCIMENTO = _PRO_DT_NASCIMENTO,
PRO_FL_PROFESSOR_ATIVO_SN = _US_FL_PROFESSOR_ATIVO_SN,
PRO_DT_AUDITORIA_ALTERACAO = _PRO_DT_AUDITORIA_ALTERACAO,
PRO_DS_AUDITORIA_LOGIN = _PRO_AUDITORIA_LOGIN
WHERE
    CD_PROFESSOR = _CD_PROFESSOR;
    
COMMIT WORK;

END$$
DELIMITER ;

############################-----------

DROP PROCEDURE IF EXISTS PR_T_USUARIO_DELETE;

DELIMITER $$
CREATE PROCEDURE PR_T_USUARIO_DELETE
(
IN _CD_USUARIO int(11)
)
BEGIN
DECLARE errno INT;

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
	GET CURRENT DIAGNOSTICS CONDITION 1 errno = MYSQL_ERRNO;
	SELECT errno AS MYSQL_ERROR;
	ROLLBACK;
END;

START TRANSACTION;

UPDATE T_USUARIO
SET
    FL_USUARIO_ATIVO_SN = 'N'
WHERE
    CD_USUARIO = _CD_USUARIO;
    
COMMIT WORK;

END$$
DELIMITER ;

############################----------

DROP PROCEDURE IF EXISTS PR_T_USUARIO_INSERT;

DELIMITER $$
CREATE PROCEDURE PR_T_USUARIO_INSERT
(
OUT _CD_USUARIO int(11),
IN _US_LOGIN VARCHAR(20),
IN _US_EMAIL VARCHAR(60),
IN _US_SENHA VARCHAR(260),
IN _US_DT_NASCIMENTO date,
IN _US_FL_USUARIO_ATIVO_SN CHAR(1), 
IN _US_DT_AUDITORIA_ALTERACAO DATETIME,
IN _US_AUDITORIA_LOGIN TEXT
)
BEGIN
DECLARE errno INT;

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
	GET CURRENT DIAGNOSTICS CONDITION 1 errno = MYSQL_ERRNO;
	SELECT errno AS MYSQL_ERROR;
	ROLLBACK;
END;

START TRANSACTION;

INSERT INTO T_USUARIO
(
    US_LOGIN,
    US_EMAIL,
    US_SENHA,
    US_DT_NASCIMENTO,
    US_FL_USUARIO_ATIVO_SN, 
    US_DT_AUDITORIA_ALTERACAO,
    US_AUDITORIA_LOGIN
)
VALUES
(
    _US_LOGIN,
    _US_EMAIL,
    _US_SENHA,
    _US_DT_NASCIMENTO,
    _US_FL_USUARIO_ATIVO_SN, 
    _US_DT_AUDITORIA_ALTERACAO,
    _US_AUDITORIA_LOGIN
);

COMMIT WORK;
SET
	_CD_USUARIO = LAST_INSERT_ID();

END$$
DELIMITER ;

##########################################--

DROP PROCEDURE IF EXISTS PR_T_USUARIO_UPDATE;

DELIMITER $$
CREATE PROCEDURE PR_T_USUARIO_UPDATE
(
IN _CD_USUARIO int(11),
IN _US_LOGIN VARCHAR(20),
IN _US_EMAIL VARCHAR(60),
IN _US_SENHA VARCHAR(260),
IN _US_DT_NASCIMENTO date,
IN _US_FL_USUARIO_ATIVO_SN CHAR(1), 
IN _US_DT_AUDITORIA_ALTERACAO DATETIME,
IN _US_AUDITORIA_LOGIN TEXT
)
BEGIN
DECLARE errno INT;

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
	GET CURRENT DIAGNOSTICS CONDITION 1 errno = MYSQL_ERRNO;
	SELECT errno AS MYSQL_ERROR;
	ROLLBACK;
END;

START TRANSACTION;

UPDATE T_USUARIO
SET
US_LOGIN = _US_LOGIN,
US_EMAIL = _US_EMAIL,
US_SENHA = _US_SENHA,
US_DT_NASCIMENTO = _US_DT_NASCIMENTO,
US_FL_USUARIO_ATIVO_SN = _US_FL_USUARIO_ATIVO_SN,
US_AUDITORIA_LOGIN = _US_AUDITORIA_LOGIN
WHERE
    CD_USUARIO = _CD_USUARIO;
    
COMMIT WORK;

END$$
DELIMITER ;

##########################################--

DROP VIEW IF EXISTS VW_CURSO;
CREATE VIEW VW_CURSO
AS
SELECT
CUR.CD_CURSO,
CUR.CUR_TITULO,
CUR.CUR_DESCRICAO,
CUR.CUR_QT_AULA,
CUR.CUR_REQUERIMENTO_01,
CUR.CUR_REQUERIMENTO_02,
CUR.CUR_REQUERIMENTO_03,
CUR.CUR_REQUERIMENTO_04,
CUR.CUR_REQUERIMENTO_05,
CUR.CUR_FL_CURSO_ATIVO_SN, 
CUR.CUR_DT_AUDITORIA_ALTERACAO,
CUR.CUR_DS_AUDITORIA_LOGIN,

LP.CD_LINGUAGEM_PROGRAMACAO,
LP.LP_NOME,

PRO.CD_PROFESSOR,
PRO.PRO_LOGIN

FROM
T_CURSO as CUR

INNER JOIN T_LINGUAGEM_PROGRAMACAO AS LP
ON LP.CD_LINGUAGEM_PROGRAMACAO = CUR.CD_LINGUAGEM_PROGRAMACAO

INNER JOIN T_PROFESSOR AS PRO
ON PRO.CD_PROFESSOR = CUR.CD_PROFESSOR;


############################------

DROP VIEW IF EXISTS VW_LINGUAGEM_PROGRAMACAO;
CREATE VIEW VW_LINGUAGEM_PROGRAMACAO
AS
SELECT
    LP.LP_NOME,
    LP.LP_FL_LINGUAGEM_PROGRAMACAO_ATIVO_SN,
    LP.LP_DT_AUDITORIA_ALTERACAO,
    LP.LP_DS_AUDITORIA_LOGIN

FROM T_LINGUAGEM_PROGRAMACAO as LP;

############################------

DROP VIEW IF EXISTS VW_MATRICULA;
CREATE VIEW VW_MATRICULA
AS
SELECT
    MA.MA_STATUS,
    MA.MA_DT_INICIO,
    MA.MA_DT_TERMINO,
    MA.MA_FL_MATRICULA_ATIVO_SN, 
    MA.MA_DT_AUDITORIA_ALTERACAO,
    MA.MA_DS_AUDITORIA_LOGIN,

    US.CD_USUARIO,
    US.US_LOGIN,

    CUR.CD_CURSO,
    CUR.CUR_TITULO

FROM
T_MATRICULA as MA

INNER JOIN T_USUARIO AS US
ON US.CD_USUARIO = MA.CD_USUARIO

INNER JOIN T_CURSO AS CUR
ON CUR.CD_CURSO = MA.CD_CURSO;


############################----------

DROP VIEW IF EXISTS VW_PROFESSOR;
CREATE VIEW VW_PROFESSOR
AS
SELECT
PRO.CD_PROFESSOR,
PRO.PRO_LOGIN,
PRO.PRO_EMAIL,
PRO.PRO_SENHA,
PRO.PRO_CPF,
PRO.PRO_DT_NASCIMENTO,
PRO.PRO_FL_PROFESSOR_ATIVO_SN,
PRO.PRO_DT_AUDITORIA_ALTERACAO,
PRO.PRO_DS_AUDITORIA_LOGIN

FROM
T_PROFESSOR as PRO;

############################----------

DROP VIEW IF EXISTS VW_USUARIO;
CREATE VIEW VW_USUARIO
AS
SELECT
US.CD_USUARIO,
US.US_LOGIN,
US.US_EMAIL,
US.US_SENHA,
US.US_DT_NASCIMENTO,
US.US_FL_USUARIO_ATIVO_SN,
US.US_DT_AUDITORIA_ALTERACAO,
US.US_AUDITORIA_LOGIN

FROM
T_USUARIO as US;
